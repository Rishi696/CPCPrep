#include <bits/stdc++.h>
using namespace std;

/* Assuming -1 is filled for the places
where element is not available */
#define NA -1

/* Function to move m elements at
the end of array mPlusN[] */
void moveToEnd(int mPlusN[], int size)
{
  int n=size-1;
  int j=n;
  for(int i=n;i>=0;i--)
  {
    if(mPlusN[i]!=NA)
    {
      mPlusN[j]=mPlusN[i];
      j--;
    }
  }
}

/* Merges array N[] of size n into
array mPlusN[] of size m+n*/
int merge(int mPlusN[], int N[], int m, int n)
{
  int i=n,j=0,k=0;
  while(k<m+n)
  {
    if(i<m+n && mPlusN[i]<=N[j] || j==n)
    {
      mPlusN[k]=mPlusN[i];
      i++;
      k++;
    }
    else
    {
      mPlusN[k]=N[j];
      j++;
      k++;
    }
  }
}

/* Utility that prints out an array on a line */
void printArray(int arr[], int size)
{
for (int i = 0; i < size; i++)
cout << arr[i] << " ";

cout << endl;
}

/* Driver code */
int main()
{
/* Initialize arrays */
int mPlusN[] = {2, 8, NA, NA, NA, 13, NA, 15, 20};
int N[] = {5, 7, 9, 25};
	
int n = sizeof(N) / sizeof(N[0]);
int m = sizeof(mPlusN) / sizeof(mPlusN[0]) - n;

/*Move the m elements at the end of mPlusN*/
moveToEnd(mPlusN, m + n);

/*Merge N[] into mPlusN[] */
merge(mPlusN, N, m, n);

/* Print the resultant mPlusN */
printArray(mPlusN, m+n);

return 0;
}
