#Memoisation
class Solution
{
    public:
    //Function to find the length of longest common subsequence in two strings.
    int dp[1001][1001];
    int reclcs(string s1,string s2,int n,int m)
    {
        if(n==0 || m==0) return 0;
        if(dp[n-1][m-1]!=-1)
        {
            return dp[n-1][m-1];
        }
        if(s1[n-1]==s2[m-1])
        {
           return dp[n-1][m-1]=1+reclcs(s1,s2,n-1,m-1);
        }
        else
        {
            return dp[n-1][m-1]=max(reclcs(s1,s2,n-1,m),reclcs(s1,s2,n,m-1));
        }
    }
    int lcs(int x, int y, string s1, string s2)
    {
        memset(dp,-1,sizeof(dp));
        int ans=reclcs(s1,s2,x,y);
        return ans;
    }
};
-------------------------------------------------------------------------------------------------
class Solution
{
    public:
    //Function to find the length of longest common subsequence in two strings.
    int dp[1001][1001];
    int lcs(int x, int y, string s1, string s2)
    {
        int i,j;
        for(i=0;i<=x;i++)
        {
            dp[0][i]=0;
        }
        for(i=0;i<=y;i++)
        {
            dp[i][0]=0;
        }
        for(i=1;i<=x;i++)
        {
            for(int j=1;j<=y;j++)
            {
                if(s1[i-1]==s2[j-1])
                {
                    dp[i][j]=1+dp[i-1][j-1];
                }
                else
                {
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        return dp[x][y];
    }
};
