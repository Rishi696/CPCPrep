class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int rows=grid.size();
        int cols=grid[0].size();
        if(grid[0][0]==1 || grid[rows-1][cols-1]==1) return -1;
        if(rows==1 && cols==1) return 1;
        queue<pair<int,int>> q;
        q.push({0,0});
        vector<pair<int,int>> dir={{-1,-1},{-1,0},{-1,1},{0,1},{1,1},{1,0},{1,-1},{0,-1}};
        while(!q.empty())
        {
            pair<int,int> front=q.front();
            q.pop();
            int curr_x=front.first;
            int curr_y=front.second;
            for(int i=0;i<dir.size();i++)
            {
                int new_x=curr_x+dir[i].first;
                int new_y=curr_y+dir[i].second;
                if(new_x>=0 && new_y>=0 && new_x<rows && new_y<cols && grid[new_x][new_y]==0)
                {
                    q.push({new_x,new_y});
                    grid[new_x][new_y]=grid[curr_x][curr_y]+1;
                }
            }
        }
        if(grid[rows-1][cols-1]) return grid[rows-1][cols-1]+1;
        return -1;
    }
};
