class Solution {
public:
   
    bool cycleexists(int src,vector<int> &visited,vector<vector<int>> &graph)
    {
        visited[src]=1;
        for(auto x:graph[src])
        {
            if(visited[x]==0)
            {
                if(cycleexists(x,visited,graph))
                {
                    return true;
                }
            }
            else if(visited[x]==1)
            {
                return true;
            }
        }
        visited[src]=2;
        return false;
    }
    
    void dfs(int src,vector<int> &vis,vector<vector<int>> &graph,stack<int> &s)
    {
        vis[src]=1;
        for(auto x:graph[src])
        {
            if(!vis[x])
            {
                dfs(x,vis,graph,s);
            }
        }
        s.push(src);
    }
    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
        int v=numCourses;
        int e=prerequisites.size();
        vector<int> ans;
        vector<vector<int>> graph(v);
       
        for(int i=0;i<e;i++)
        {
            graph[prerequisites[i][1]].push_back(prerequisites[i][0]);
        }
        
        vector<int> visited(v,0);
        for(int i=0;i<v;i++)
        {
            if(!visited[i])
            {
                if(cycleexists(i,visited,graph))
                {
                    return ans;
                }
            }
        }
        
        stack<int> s;
        vector<int> vis(v,0);
        for(int i=0;i<v;i++)
        {
            if(!vis[i])
            {
                dfs(i,vis,graph,s);
            }
        }
        while(!s.empty())
        {
            int popped=s.top();
            s.pop();
            ans.push_back(popped);
        }
        return ans;
    }
};
