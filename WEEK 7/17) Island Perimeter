class Solution {
public:
    int perimeter=0;
    void dfs(vector<vector<int>> &grid,int sr,int sc,int rows,int cols,vector<vector<int>> &visited)
    {
        if(sr<0 || sc<0 || sr>=rows || sc>=cols) 
        {
            perimeter+=1; 
                return;
        }
        if(grid[sr][sc]==0)
        { 
            perimeter+=1;
            return;
        }
        if(grid[sr][sc]==-1)
        {
            return;
        }
        visited[sr][sc]=1;
        grid[sr][sc]=-1;
        dfs(grid,sr,sc+1,rows,cols,visited);
        dfs(grid,sr,sc-1,rows,cols,visited);
        dfs(grid,sr+1,sc,rows,cols,visited);
        dfs(grid,sr-1,sc,rows,cols,visited);  
    }
    int islandPerimeter(vector<vector<int>>& grid) {
        int rows=grid.size();
        int cols=grid[0].size();
        vector<vector<int>> visited(rows,vector<int>(cols,0));
        for(int i=0;i<rows;i++)
        {
            for(int j=0;j<cols;j++)
            {
                if(grid[i][j]==1)
                {
                    dfs(grid,i,j,rows,cols,visited);
                    return perimeter;
                }
            }
        }
        return 0;
    }
};
