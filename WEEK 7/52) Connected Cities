void dfs1(int src, vector<int> graph[], vector<int>& topological, vector<int>& visited) {
    visited[src] = 1;
    for (auto it : graph[src]) {
        if (visited[it]==0) {
            dfs1(it, graph, topological, visited);
        }
    }
    topological.push_back(src);
}
void dfs2(int src, vector<int> revgraph[], vector<int>& visited) {
    visited[src] = 1;
    for (auto it : revgraph[src]) {
        if (visited[it]==0) {
            dfs2(it, revgraph, visited);
        }
    }
}
bool solve(int n, vector<vector<int>>& roads) {
    int edges = roads.size();
    if (edges == 0 && n == 1) return true;
    if (edges == 0) return false;
    vector<int> graph[10000];
    vector<int> revgraph[10000];
    vector<int> topological;
    for (int i = 0; i < edges; i++) {
        graph[roads[i][0]].push_back(roads[i][1]);
        revgraph[roads[i][1]].push_back(roads[i][0]);
    }
    vector<int> visited(n, 0);
    for (int i = 0; i < n; i++) {
        if (visited[i]==0) {
            dfs1(i, graph, topological, visited);
        }
    }
    reverse(topological.begin(), topological.end());
    visited.assign(n, 0);
    int count = 0;
    for (auto x : topological) {
        if (visited[x]==0) {
            dfs2(x, revgraph, visited);
            count++;
        }
    }
    if (count == 1) return true;
    return false;
}
