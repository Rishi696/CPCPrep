class Solution {
public:
    void dfs(int src,vector<int> graph[],vector<int> &visited)
    {
        visited[src]=1;
        for(auto j:graph[src])
        {
            if(!visited[j])
            {
                dfs(j,graph,visited);
            }
        }
        // for(int j=0;j<graph[src].size();j++)
        // {
        //     if(!visited[j])
        //     {
        //         dfs(j,graph,visited);
        //     }
        // }
    }
    int makeConnected(int n, vector<vector<int>>& connections) {
        if(n-1>connections.size())
        {
            return -1;
        }
        vector<int> visited(n,0);
        int count=0;
        vector<int> graph[n];
        for(auto it:connections)
        {
            graph[it[0]].push_back(it[1]);
            graph[it[1]].push_back(it[0]);
        }
        
        for(int i=0;i<n;i++)
        {
            if(!visited[i])
            {
                dfs(i,graph,visited);
                count++;
            }
        }
        return count-1;
    }
};
