class Solution {
public:
    int parent[1001];
    int rank[1001];
    int find(int v)
    {
        if(v==parent[v]) return v;
        return parent[v]=find(parent[v]);
    }
    void unionn(int a,int b)
    {
        a=find(a);
        b=find(b);
        if(a!=b)
        {
            if(rank[a]<rank[b])
                swap(a,b);
            parent[b]=a;
            if(rank[a]==rank[b])
                rank[a]++;
        }
    }
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        for(int i=0;i<=edges.size();i++)
        {
            parent[i]=i;
            rank[i]=0;
        }
        for(auto it:edges)
        {
            if(find(it[0])==find(it[1]))
            {
                return it;
            }
            unionn(it[0],it[1]);
        }
        return {};
    }
};
