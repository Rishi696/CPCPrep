class Solution {
public:
    void dfs(vector<vector<char>> &board,vector<vector<int>> &visited,int i,int j)
    {
        if(i<0 || j<0 || i>=board.size() || j>=board[0].size()) return;
        if(board[i][j]=='X'|| board[i][j]=='P') return;
        board[i][j]='P';
        dfs(board,visited,i,j+1);
        dfs(board,visited,i,j-1);
        dfs(board,visited,i+1,j);
        dfs(board,visited,i-1,j);
    }
    void solve(vector<vector<char>>& board) {
        int rows=board.size();
        int cols=board[0].size();
        vector<vector<int>> visited(rows,vector<int>(cols,0));
        for(int i=0;i<rows;i++)
        {
            if(board[i][0]=='O')
            {
                dfs(board,visited,i,0);
            }
        }
        for(int i=0;i<cols;i++)
        {
            if(board[0][i]=='O')
            {
                dfs(board,visited,0,i);
            }
        }
        for(int i=0;i<rows;i++)
        {
            if(board[i][cols-1]=='O')
            {
                dfs(board,visited,i,cols-1);
            }
        }
        for(int i=0;i<cols;i++)
        {
            if(board[rows-1][i]=='O')
            {
                dfs(board,visited,rows-1,i);
            }
        }
        
        for(int i=0;i<rows;i++)
        {
            for(int j=0;j<cols;j++)
            {
                if(board[i][j]=='O')
                    board[i][j]='X';
                if(board[i][j]=='P')
                    board[i][j]='O';
            }
        }
    }
};
