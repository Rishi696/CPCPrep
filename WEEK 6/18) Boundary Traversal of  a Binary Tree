class Solution {
public:
    void leftboundary(Node *root,vector<int> &ans)
    {
        if(root==NULL)
        {
            return;
        }
        if(root->left)
        {
            ans.push_back(root->data);
            leftboundary(root->left,ans);
        }
        else if(root->right)
        {
            ans.push_back(root->data);
            leftboundary(root->right,ans);
        }
        
    }
    void rightboundary(Node *root,vector<int> &ans)
    {
        if(root==NULL)
        {
            return;
        }
        if(root->right)
        {
            rightboundary(root->right,ans);
            ans.push_back(root->data);
        }
        else if(root->left)
        {
            rightboundary(root->left,ans);
            ans.push_back(root->data);
        }
    }
    
    void leafboundary(Node *root,vector<int> &ans)
    {
        if(root==NULL)
        {
            return;
        }
        leafboundary(root->left,ans);
        if(root->left==NULL && root->right==NULL)
        {
            ans.push_back(root->data);
        }
        leafboundary(root->right,ans);
    }
    vector <int> printBoundary(Node *root)
    {
        vector<int> ans;
        ans.push_back(root->data);
        leftboundary(root->left,ans);
        leafboundary(root,ans);
        rightboundary(root->right,ans);
        return ans;
    }
};
