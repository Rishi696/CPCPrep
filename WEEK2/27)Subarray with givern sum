class Solution{
    public:
    vector<int> subarraySum(int arr[], int n, int s){
        int curr_sum = 0, start = 0, i;
        vector<int> res;
 
    
    for (i = 0; i <= n; i++) {
        
        
        curr_sum = curr_sum + arr[i];
        while (curr_sum > s && start < i) {
            curr_sum = curr_sum - arr[start];
            start++;
        }
 
        
        if (curr_sum == s) {
            res.push_back(start+1);
            res.push_back(i+1);
            return res;
        }
 
        
    }
        res.push_back(-1);
        return res;
    }
};
-------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution
{
  public:
    int subArraySum(int arr[], int n, int sum)
    {
    	unordered_map<int,int> m;
    	m.insert({0,1});
    	int s=0;
    	int count=0;
    	for(int i=0;i<n;i++)
    	{
    	    s+=arr[i];
    	    
    	    if(m.find(s-sum)!=m.end())
    	    {
    	        count+=m[s-sum];
    	    }
    	    m[s]+=1;
    	}
    	return count;
    }
};
